local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
local log = require "log"
local cluster_base = require "st.zigbee.cluster_base"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'aab104a27ce2f5279180e69ba93ef579673eddc5'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- IASACE command Bypass
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.IASACE.Bypass
--- @alias Bypass
---
--- @field public ID number 0x01 the ID of this command
--- @field public NAME string "Bypass" the name of this command
--- @field public zone_id_list st.zigbee.data_types.Uint8[]
--- @field public arm_disarm_code st.zigbee.data_types.CharString
local Bypass = {}
Bypass.NAME = "Bypass"
Bypass.ID = 0x01
Bypass.args_def = {
  {
    name = "zone_id",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = true,
    default = 0x00,
  },
  {
    name = "arm_disarm_code",
    optional = false,
    data_type = data_types.CharString,
    is_complex = false,
    is_array = false,
    default = "",
  },
}

function Bypass:get_fields()
  return cluster_base.command_get_fields(self)
end

Bypass.get_length = utils.length_from_fields
Bypass._serialize = utils.serialize_from_fields
Bypass.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return Bypass
function Bypass.deserialize(buf)
  return cluster_base.command_deserialize(Bypass, buf)
end

function Bypass:set_field_names()
  cluster_base.command_set_fields(self)
end

--- Build a version of this message as if it came from the device
---
--- @param device st.zigbee.Device the device to build the message from
--- @param zone_id st.zigbee.data_types.Uint8[]
--- @param arm_disarm_code st.zigbee.data_types.CharString
--- @return st.zigbee.ZigbeeMessageRx The full Zigbee message containing this command body
function Bypass.build_test_rx(device, zone_id, arm_disarm_code)
  local args = {zone_id, arm_disarm_code}

  return cluster_base.command_build_test_rx(Bypass, device, args, "server")
end

--- Initialize the Bypass command
---
--- @param self Bypass the template class for this command
--- @param device st.zigbee.Device the device to build this message to
--- @param zone_id st.zigbee.data_types.Uint8[]
--- @param arm_disarm_code st.zigbee.data_types.CharString
--- @return st.zigbee.ZigbeeMessageTx the full command addressed to the device
function Bypass:init(device, zone_id, arm_disarm_code)
  local args = {zone_id, arm_disarm_code}

  return cluster_base.command_init(self, device, args, "server")
end

function Bypass:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(Bypass, {__call = Bypass.init})

return Bypass
