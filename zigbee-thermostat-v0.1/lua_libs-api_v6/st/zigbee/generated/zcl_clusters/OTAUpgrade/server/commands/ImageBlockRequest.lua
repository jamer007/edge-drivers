local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
local log = require "log"
local cluster_base = require "st.zigbee.cluster_base"
local FieldControlType = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.types.FieldControl"
local ImageTypeIdType = require "st.zigbee.generated.zcl_clusters.OTAUpgrade.types.ImageTypeId"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'aab104a27ce2f5279180e69ba93ef579673eddc5'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- OTAUpgrade command ImageBlockRequest
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.OTAUpgrade.ImageBlockRequest
--- @alias ImageBlockRequest
---
--- @field public ID number 0x03 the ID of this command
--- @field public NAME string "ImageBlockRequest" the name of this command
--- @field public field_control st.zigbee.zcl.clusters.OTAUpgrade.types.FieldControl
--- @field public manufacturer_code st.zigbee.data_types.Uint16
--- @field public image_type st.zigbee.zcl.clusters.OTAUpgrade.types.ImageTypeId
--- @field public file_version st.zigbee.data_types.Uint32
--- @field public file_offset st.zigbee.data_types.Uint32
--- @field public maximum_data_size st.zigbee.data_types.Uint8
--- @field public request_node_address st.zigbee.data_types.IeeeAddress
--- @field public minimum_block_period st.zigbee.data_types.Uint16
local ImageBlockRequest = {}
ImageBlockRequest.NAME = "ImageBlockRequest"
ImageBlockRequest.ID = 0x03
ImageBlockRequest.args_def = {
  {
    name = "field_control",
    optional = false,
    data_type = FieldControlType,
    is_complex = false,
    is_array = false,
  },
  {
    name = "manufacturer_code",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
  {
    name = "image_type",
    optional = false,
    data_type = ImageTypeIdType,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
  {
    name = "file_version",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    is_array = false,
    default = 0x00000000,
  },
  {
    name = "file_offset",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    is_array = false,
    default = 0x00000000,
  },
  {
    name = "maximum_data_size",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "request_node_address",
    optional = false,
    data_type = data_types.IeeeAddress,
    is_complex = false,
    is_array = false,
  },
  {
    name = "minimum_block_period",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
}

function ImageBlockRequest:get_fields()
  return cluster_base.command_get_fields(self)
end

ImageBlockRequest.get_length = utils.length_from_fields
ImageBlockRequest._serialize = utils.serialize_from_fields
ImageBlockRequest.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return ImageBlockRequest
function ImageBlockRequest.deserialize(buf)
  return cluster_base.command_deserialize(ImageBlockRequest, buf)
end

function ImageBlockRequest:set_field_names()
  cluster_base.command_set_fields(self)
end

--- Build a version of this message as if it came from the device
---
--- @param device st.zigbee.Device the device to build the message from
--- @param field_control st.zigbee.zcl.clusters.OTAUpgrade.types.FieldControl
--- @param manufacturer_code st.zigbee.data_types.Uint16
--- @param image_type st.zigbee.zcl.clusters.OTAUpgrade.types.ImageTypeId
--- @param file_version st.zigbee.data_types.Uint32
--- @param file_offset st.zigbee.data_types.Uint32
--- @param maximum_data_size st.zigbee.data_types.Uint8
--- @param request_node_address st.zigbee.data_types.IeeeAddress
--- @param minimum_block_period st.zigbee.data_types.Uint16
--- @return st.zigbee.ZigbeeMessageRx The full Zigbee message containing this command body
function ImageBlockRequest.build_test_rx(device, field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period)
  local args = {field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period}

  return cluster_base.command_build_test_rx(ImageBlockRequest, device, args, "server")
end

--- Initialize the ImageBlockRequest command
---
--- @param self ImageBlockRequest the template class for this command
--- @param device st.zigbee.Device the device to build this message to
--- @param field_control st.zigbee.zcl.clusters.OTAUpgrade.types.FieldControl
--- @param manufacturer_code st.zigbee.data_types.Uint16
--- @param image_type st.zigbee.zcl.clusters.OTAUpgrade.types.ImageTypeId
--- @param file_version st.zigbee.data_types.Uint32
--- @param file_offset st.zigbee.data_types.Uint32
--- @param maximum_data_size st.zigbee.data_types.Uint8
--- @param request_node_address st.zigbee.data_types.IeeeAddress
--- @param minimum_block_period st.zigbee.data_types.Uint16
--- @return st.zigbee.ZigbeeMessageTx the full command addressed to the device
function ImageBlockRequest:init(device, field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period)
  local args = {field_control, manufacturer_code, image_type, file_version, file_offset, maximum_data_size, request_node_address, minimum_block_period}

  return cluster_base.command_init(self, device, args, "server")
end

function ImageBlockRequest:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ImageBlockRequest, {__call = ImageBlockRequest.init})

return ImageBlockRequest
