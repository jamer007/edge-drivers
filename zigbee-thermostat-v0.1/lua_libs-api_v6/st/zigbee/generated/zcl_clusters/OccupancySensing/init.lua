local cluster_base = require "st.zigbee.cluster_base"
local OccupancySensingClientAttributes = require "st.zigbee.generated.zcl_clusters.OccupancySensing.client.attributes"
local OccupancySensingServerAttributes = require "st.zigbee.generated.zcl_clusters.OccupancySensing.server.attributes"
local OccupancySensingClientCommands = require "st.zigbee.generated.zcl_clusters.OccupancySensing.client.commands"
local OccupancySensingServerCommands = require "st.zigbee.generated.zcl_clusters.OccupancySensing.server.commands"
local OccupancySensingTypes = require "st.zigbee.generated.zcl_clusters.OccupancySensing.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'aab104a27ce2f5279180e69ba93ef579673eddc5'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.OccupancySensing
--- @alias OccupancySensing
---
--- @field public ID number 0x0406 the ID of this cluster
--- @field public NAME string "OccupancySensing" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.OccupancySensingServerAttributes | st.zigbee.zcl.clusters.OccupancySensingClientAttributes
--- @field public commands st.zigbee.zcl.clusters.OccupancySensingServerCommands | st.zigbee.zcl.clusters.OccupancySensingClientCommands
--- @field public types st.zigbee.zcl.clusters.OccupancySensingTypes
local OccupancySensing = {}

OccupancySensing.ID = 0x0406
OccupancySensing.NAME = "OccupancySensing"
OccupancySensing.server = {}
OccupancySensing.client = {}
OccupancySensing.server.attributes = OccupancySensingServerAttributes:set_parent_cluster(OccupancySensing)
OccupancySensing.client.attributes = OccupancySensingClientAttributes:set_parent_cluster(OccupancySensing)
OccupancySensing.server.commands = OccupancySensingServerCommands:set_parent_cluster(OccupancySensing)
OccupancySensing.client.commands = OccupancySensingClientCommands:set_parent_cluster(OccupancySensing)
OccupancySensing.types = OccupancySensingTypes

function OccupancySensing.attr_id_map()
    return {
    [0x0000] = "Occupancy",
    [0x0001] = "OccupancySensorType",
    [0x0002] = "OccupancySensorTypeBitmap",
    [0x0010] = "PIROccupiedToUnoccupiedDelay",
    [0x0011] = "PIRUnoccupiedToOccupiedDelay",
    [0x0012] = "PIRUnoccupiedToOccupiedThreshold",
    [0x0020] = "UltrasonicOccupiedToUnoccupiedDelay",
    [0x0021] = "UltrasonicUnoccupiedToOccupiedDelay",
    [0x0022] = "UltrasonicUnoccupiedToOccupiedThreshold",
    [0x0030] = "PhysicalContactOccupiedToUnoccupiedDelay",
    [0x0031] = "PhysicalContactUnoccupiedToOccupiedDelay",
    [0x0032] = "PhysicalContactUnoccupiedToOccupiedThreshold",
  }
end

function OccupancySensing.server_id_map()
    return {
  }
end

function OccupancySensing.client_id_map()
    return {
  }
end

OccupancySensing.attribute_direction_map = {
  ["Occupancy"] = "server",
  ["OccupancySensorType"] = "server",
  ["OccupancySensorTypeBitmap"] = "server",
  ["PIROccupiedToUnoccupiedDelay"] = "server",
  ["PIRUnoccupiedToOccupiedDelay"] = "server",
  ["PIRUnoccupiedToOccupiedThreshold"] = "server",
  ["UltrasonicOccupiedToUnoccupiedDelay"] = "server",
  ["UltrasonicUnoccupiedToOccupiedDelay"] = "server",
  ["UltrasonicUnoccupiedToOccupiedThreshold"] = "server",
  ["PhysicalContactOccupiedToUnoccupiedDelay"] = "server",
  ["PhysicalContactUnoccupiedToOccupiedDelay"] = "server",
  ["PhysicalContactUnoccupiedToOccupiedThreshold"] = "server",
}
OccupancySensing.command_direction_map = {}

setmetatable(OccupancySensing, {__index = cluster_base})

OccupancySensing:init_attributes_table()
OccupancySensing:init_commands_table()

return OccupancySensing
