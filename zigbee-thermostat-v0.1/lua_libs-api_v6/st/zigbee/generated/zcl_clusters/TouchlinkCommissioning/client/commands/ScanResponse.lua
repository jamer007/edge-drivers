local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
local log = require "log"
local cluster_base = require "st.zigbee.cluster_base"
local KeyBitmaskType = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.types.KeyBitmask"
local TlVersionType = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.types.TlVersion"
local TlTouchlinkInformationType = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.types.TlTouchlinkInformation"
local TlZigbeeInformationType = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.types.TlZigbeeInformation"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'aab104a27ce2f5279180e69ba93ef579673eddc5'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- TouchlinkCommissioning command ScanResponse
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.TouchlinkCommissioning.ScanResponse
--- @alias ScanResponse
---
--- @field public ID number 0x01 the ID of this command
--- @field public NAME string "ScanResponse" the name of this command
--- @field public inter_pan_transaction_identifier st.zigbee.data_types.Uint32
--- @field public rssi_correction st.zigbee.data_types.Uint8
--- @field public zigbee_information st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlZigbeeInformation
--- @field public touchlink_information st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlTouchlinkInformation
--- @field public key_bitmask st.zigbee.zcl.clusters.TouchlinkCommissioning.types.KeyBitmask
--- @field public response_identifier st.zigbee.data_types.Uint32
--- @field public extended_pan_identifier st.zigbee.data_types.IeeeAddress
--- @field public network_update_identifier st.zigbee.data_types.Uint8
--- @field public logical_channel st.zigbee.data_types.Uint8
--- @field public pan_identifier st.zigbee.data_types.Uint16
--- @field public network_address st.zigbee.data_types.Uint16
--- @field public number_of_sub_devices st.zigbee.data_types.Uint8
--- @field public total_group_identifiers st.zigbee.data_types.Uint8
--- @field public endpoint_identifier st.zigbee.data_types.Uint8
--- @field public profile_identifier st.zigbee.data_types.Uint16
--- @field public device_identifier st.zigbee.data_types.Uint16
--- @field public version st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlVersion
--- @field public group_identifier_count st.zigbee.data_types.Uint8
local ScanResponse = {}
ScanResponse.NAME = "ScanResponse"
ScanResponse.ID = 0x01
ScanResponse.args_def = {
  {
    name = "inter_pan_transaction_identifier",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    is_array = false,
    default = 0x00000000,
  },
  {
    name = "rssi_correction",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "zigbee_information",
    optional = false,
    data_type = TlZigbeeInformationType,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "touchlink_information",
    optional = false,
    data_type = TlTouchlinkInformationType,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "key_bitmask",
    optional = false,
    data_type = KeyBitmaskType,
    is_complex = false,
    is_array = false,
  },
  {
    name = "response_identifier",
    optional = false,
    data_type = data_types.Uint32,
    is_complex = false,
    is_array = false,
    default = 0x00000000,
  },
  {
    name = "extended_pan_identifier",
    optional = false,
    data_type = data_types.IeeeAddress,
    is_complex = false,
    is_array = false,
  },
  {
    name = "network_update_identifier",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "logical_channel",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "pan_identifier",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
  {
    name = "network_address",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
  {
    name = "number_of_sub_devices",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "total_group_identifiers",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "endpoint_identifier",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "profile_identifier",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
  {
    name = "device_identifier",
    optional = false,
    data_type = data_types.Uint16,
    is_complex = false,
    is_array = false,
    default = 0x0000,
  },
  {
    name = "version",
    optional = false,
    data_type = TlVersionType,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "group_identifier_count",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
}

function ScanResponse:get_fields()
  return cluster_base.command_get_fields(self)
end

ScanResponse.get_length = utils.length_from_fields
ScanResponse._serialize = utils.serialize_from_fields
ScanResponse.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return ScanResponse
function ScanResponse.deserialize(buf)
  return cluster_base.command_deserialize(ScanResponse, buf)
end

function ScanResponse:set_field_names()
  cluster_base.command_set_fields(self)
end

--- Build a version of this message as if it came from the device
---
--- @param device st.zigbee.Device the device to build the message from
--- @param inter_pan_transaction_identifier st.zigbee.data_types.Uint32
--- @param rssi_correction st.zigbee.data_types.Uint8
--- @param zigbee_information st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlZigbeeInformation
--- @param touchlink_information st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlTouchlinkInformation
--- @param key_bitmask st.zigbee.zcl.clusters.TouchlinkCommissioning.types.KeyBitmask
--- @param response_identifier st.zigbee.data_types.Uint32
--- @param extended_pan_identifier st.zigbee.data_types.IeeeAddress
--- @param network_update_identifier st.zigbee.data_types.Uint8
--- @param logical_channel st.zigbee.data_types.Uint8
--- @param pan_identifier st.zigbee.data_types.Uint16
--- @param network_address st.zigbee.data_types.Uint16
--- @param number_of_sub_devices st.zigbee.data_types.Uint8
--- @param total_group_identifiers st.zigbee.data_types.Uint8
--- @param endpoint_identifier st.zigbee.data_types.Uint8
--- @param profile_identifier st.zigbee.data_types.Uint16
--- @param device_identifier st.zigbee.data_types.Uint16
--- @param version st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlVersion
--- @param group_identifier_count st.zigbee.data_types.Uint8
--- @return st.zigbee.ZigbeeMessageRx The full Zigbee message containing this command body
function ScanResponse.build_test_rx(device, inter_pan_transaction_identifier, rssi_correction, zigbee_information, touchlink_information, key_bitmask, response_identifier, extended_pan_identifier, network_update_identifier, logical_channel, pan_identifier, network_address, number_of_sub_devices, total_group_identifiers, endpoint_identifier, profile_identifier, device_identifier, version, group_identifier_count)
  local args = {inter_pan_transaction_identifier, rssi_correction, zigbee_information, touchlink_information, key_bitmask, response_identifier, extended_pan_identifier, network_update_identifier, logical_channel, pan_identifier, network_address, number_of_sub_devices, total_group_identifiers, endpoint_identifier, profile_identifier, device_identifier, version, group_identifier_count}

  return cluster_base.command_build_test_rx(ScanResponse, device, args, "client")
end

--- Initialize the ScanResponse command
---
--- @param self ScanResponse the template class for this command
--- @param device st.zigbee.Device the device to build this message to
--- @param inter_pan_transaction_identifier st.zigbee.data_types.Uint32
--- @param rssi_correction st.zigbee.data_types.Uint8
--- @param zigbee_information st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlZigbeeInformation
--- @param touchlink_information st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlTouchlinkInformation
--- @param key_bitmask st.zigbee.zcl.clusters.TouchlinkCommissioning.types.KeyBitmask
--- @param response_identifier st.zigbee.data_types.Uint32
--- @param extended_pan_identifier st.zigbee.data_types.IeeeAddress
--- @param network_update_identifier st.zigbee.data_types.Uint8
--- @param logical_channel st.zigbee.data_types.Uint8
--- @param pan_identifier st.zigbee.data_types.Uint16
--- @param network_address st.zigbee.data_types.Uint16
--- @param number_of_sub_devices st.zigbee.data_types.Uint8
--- @param total_group_identifiers st.zigbee.data_types.Uint8
--- @param endpoint_identifier st.zigbee.data_types.Uint8
--- @param profile_identifier st.zigbee.data_types.Uint16
--- @param device_identifier st.zigbee.data_types.Uint16
--- @param version st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlVersion
--- @param group_identifier_count st.zigbee.data_types.Uint8
--- @return st.zigbee.ZigbeeMessageTx the full command addressed to the device
function ScanResponse:init(device, inter_pan_transaction_identifier, rssi_correction, zigbee_information, touchlink_information, key_bitmask, response_identifier, extended_pan_identifier, network_update_identifier, logical_channel, pan_identifier, network_address, number_of_sub_devices, total_group_identifiers, endpoint_identifier, profile_identifier, device_identifier, version, group_identifier_count)
  local args = {inter_pan_transaction_identifier, rssi_correction, zigbee_information, touchlink_information, key_bitmask, response_identifier, extended_pan_identifier, network_update_identifier, logical_channel, pan_identifier, network_address, number_of_sub_devices, total_group_identifiers, endpoint_identifier, profile_identifier, device_identifier, version, group_identifier_count}

  return cluster_base.command_init(self, device, args, "client")
end

function ScanResponse:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ScanResponse, {__call = ScanResponse.init})

return ScanResponse
