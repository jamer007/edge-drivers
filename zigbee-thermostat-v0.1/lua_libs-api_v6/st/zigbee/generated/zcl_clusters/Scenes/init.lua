local cluster_base = require "st.zigbee.cluster_base"
local ScenesClientAttributes = require "st.zigbee.generated.zcl_clusters.Scenes.client.attributes"
local ScenesServerAttributes = require "st.zigbee.generated.zcl_clusters.Scenes.server.attributes"
local ScenesClientCommands = require "st.zigbee.generated.zcl_clusters.Scenes.client.commands"
local ScenesServerCommands = require "st.zigbee.generated.zcl_clusters.Scenes.server.commands"
local ScenesTypes = require "st.zigbee.generated.zcl_clusters.Scenes.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'aab104a27ce2f5279180e69ba93ef579673eddc5'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.Scenes
--- @alias Scenes
---
--- @field public ID number 0x0005 the ID of this cluster
--- @field public NAME string "Scenes" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.ScenesServerAttributes | st.zigbee.zcl.clusters.ScenesClientAttributes
--- @field public commands st.zigbee.zcl.clusters.ScenesServerCommands | st.zigbee.zcl.clusters.ScenesClientCommands
--- @field public types st.zigbee.zcl.clusters.ScenesTypes
local Scenes = {}

Scenes.ID = 0x0005
Scenes.NAME = "Scenes"
Scenes.server = {}
Scenes.client = {}
Scenes.server.attributes = ScenesServerAttributes:set_parent_cluster(Scenes)
Scenes.client.attributes = ScenesClientAttributes:set_parent_cluster(Scenes)
Scenes.server.commands = ScenesServerCommands:set_parent_cluster(Scenes)
Scenes.client.commands = ScenesClientCommands:set_parent_cluster(Scenes)
Scenes.types = ScenesTypes

function Scenes.attr_id_map()
    return {
    [0x0000] = "SceneCount",
    [0x0001] = "CurrentScene",
    [0x0002] = "CurrentGroup",
    [0x0003] = "SceneValid",
    [0x0004] = "NameSupport",
    [0x0005] = "LastConfiguredBy",
  }
end

function Scenes.server_id_map()
    return {
    [0x00] = "AddScene",
    [0x01] = "ViewScene",
    [0x02] = "RemoveScene",
    [0x03] = "RemoveAllScenes",
    [0x04] = "StoreScene",
    [0x05] = "RecallScene",
    [0x06] = "GetSceneMembership",
    [0x40] = "EnhancedAddScene",
    [0x41] = "EnhancedViewScene",
    [0x42] = "CopyScene",
  }
end

function Scenes.client_id_map()
    return {
    [0x00] = "AddSceneResponse",
    [0x01] = "ViewSceneResponse",
    [0x02] = "RemoveSceneResponse",
    [0x03] = "RemoveAllScenesResponse",
    [0x04] = "StoreSceneResponse",
    [0x06] = "GetSceneMembershipResponse",
    [0x40] = "EnhancedAddSceneResponse",
    [0x41] = "EnhancedViewSceneResponse",
    [0x42] = "CopySceneResponse",
  }
end

Scenes.attribute_direction_map = {
  ["SceneCount"] = "server",
  ["CurrentScene"] = "server",
  ["CurrentGroup"] = "server",
  ["SceneValid"] = "server",
  ["NameSupport"] = "server",
  ["LastConfiguredBy"] = "server",
}
Scenes.command_direction_map = {
  ["AddSceneResponse"] = "client",
  ["ViewSceneResponse"] = "client",
  ["RemoveSceneResponse"] = "client",
  ["RemoveAllScenesResponse"] = "client",
  ["StoreSceneResponse"] = "client",
  ["GetSceneMembershipResponse"] = "client",
  ["EnhancedAddSceneResponse"] = "client",
  ["EnhancedViewSceneResponse"] = "client",
  ["CopySceneResponse"] = "client",
  ["AddScene"] = "server",
  ["ViewScene"] = "server",
  ["RemoveScene"] = "server",
  ["RemoveAllScenes"] = "server",
  ["StoreScene"] = "server",
  ["RecallScene"] = "server",
  ["GetSceneMembership"] = "server",
  ["EnhancedAddScene"] = "server",
  ["EnhancedViewScene"] = "server",
  ["CopyScene"] = "server",
}

setmetatable(Scenes, {__index = cluster_base})

Scenes:init_attributes_table()
Scenes:init_commands_table()

return Scenes
